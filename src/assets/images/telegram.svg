var _path;

var _excluded = ["title", "titleId"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from "react";

function SvgTelegram(_ref, svgRef) {
  var title = _ref.title,
      titleId = _ref.titleId,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement("svg", _extends({
    width: 45,
    height: 39,
    viewBox: "0 0 45 39",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: svgRef,
    "aria-labelledby": titleId
  }, props), title ? /*#__PURE__*/React.createElement("title", {
    id: titleId
  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement("path", {
    d: "M38.5784 4.5869C38.5867 4.5869 38.6034 4.5869 38.6117 4.5869C39.2954 4.5952 39.7957 4.95298 40.0208 5.59363C40.0708 5.72676 40.1041 5.86821 40.1207 6.00965C40.1457 6.15943 40.1457 6.3175 40.1541 6.46727C40.1457 6.76679 40.0957 7.05801 40.0374 7.3409C39.3621 10.5026 38.6867 13.6643 38.0196 16.8259C37.3611 19.921 36.7024 23.0079 36.052 26.103C35.6018 28.2247 35.1515 30.338 34.7013 32.4597C34.618 32.8507 34.4928 33.2253 34.2763 33.5664C33.9759 34.0322 33.5676 34.2737 33.0671 34.2737C32.9505 34.2737 32.8337 34.257 32.7004 34.232C32.2918 34.1488 31.925 33.999 31.5914 33.7494C29.1402 31.9439 26.6891 30.1384 24.2294 28.3329C24.0628 28.2081 23.8959 28.0999 23.7375 27.9668C23.6875 27.9252 23.6375 27.9003 23.5959 27.9003C23.5457 27.9003 23.4957 27.9334 23.4374 27.9917C22.7453 28.6658 22.045 29.3314 21.3446 30.0053C20.7109 30.6126 20.0857 31.2199 19.452 31.8275C19.1186 32.1435 18.7433 32.3683 18.2764 32.4266C18.2181 32.4348 18.1764 32.4348 18.1348 32.4348C18.0013 32.4348 17.9929 32.3765 18.0013 32.1769C18.1012 30.7958 18.1931 29.4145 18.293 28.0334C18.3765 26.827 18.4598 25.6206 18.5431 24.4141C18.5515 24.231 18.61 24.0897 18.7516 23.9648C21.9198 21.1192 25.0799 18.2653 28.2397 15.4116C29.9908 13.8307 31.7499 12.2499 33.5007 10.669C33.6092 10.5775 33.7092 10.4776 33.8093 10.3695C33.8926 10.278 33.9676 10.1781 33.901 10.045C33.8343 9.92017 33.7175 9.89522 33.5925 9.8869C33.5759 9.8869 33.5509 9.8869 33.534 9.8869C33.4341 9.8869 33.3341 9.90352 33.2339 9.92849C33.0504 9.98673 32.8755 10.0616 32.7087 10.1698C28.2897 12.9487 23.8793 15.7194 19.4603 18.4983C17.7094 19.5966 15.9586 20.6948 14.2077 21.8015C14.116 21.8598 14.0242 21.893 13.9325 21.893C13.8742 21.893 13.8158 21.8847 13.7574 21.8598C11.1645 21.0444 8.56316 20.2373 5.97016 19.4303C5.64501 19.3304 5.33652 19.2055 5.06971 18.9975C4.56946 18.6149 4.51943 18.124 4.94465 17.658C5.26982 17.3086 5.67835 17.0756 6.12025 16.9091C7.85446 16.2353 9.597 15.5696 11.3396 14.8957C14.3077 13.7558 17.2676 12.6076 20.2356 11.4677C23.7291 10.1199 27.231 8.78031 30.7328 7.43241C33.0504 6.54215 35.3683 5.65187 37.6862 4.75329C37.978 4.65344 38.2698 4.5869 38.5784 4.5869ZM38.5784 0.426758C37.7862 0.426758 36.9775 0.584851 36.1855 0.884372C33.8676 1.77463 31.5498 2.67323 29.2319 3.56349L24.4628 5.39395L18.7433 7.59051L11.0978 10.5359L9.84714 11.0184L8.79661 11.4261C7.40423 11.9586 6.01186 12.4995 4.6195 13.0403C3.50225 13.4729 2.61014 14.0637 1.88477 14.8541C0.884265 15.944 0.392343 17.3168 0.517423 18.7231C0.64248 20.1291 1.3595 21.402 2.54344 22.3091C3.36886 22.9414 4.19428 23.2409 4.73621 23.4156L7.26249 24.2061C9.01338 24.7551 10.7643 25.2961 12.5151 25.8451C12.9821 25.9949 13.4656 26.0699 13.9409 26.0699C14.0493 26.0699 14.1577 26.0699 14.266 26.0614C14.241 26.3943 14.2243 26.7188 14.1993 27.0515L14.1493 27.7754L13.8575 31.9107C13.7408 33.558 14.4078 34.6397 14.9914 35.2638C15.8085 36.1372 16.9257 36.6199 18.1431 36.6199C18.3932 36.6199 18.6015 36.6032 18.7516 36.5866C19.6854 36.4784 21.0695 36.0956 22.3617 34.8476C22.8872 34.3402 23.4207 33.8243 23.9459 33.3167L29.1153 37.1191C29.9239 37.7182 30.8577 38.1259 31.8748 38.3339C32.2751 38.417 32.6754 38.4503 33.0671 38.4503C35.0016 38.4503 36.7274 37.4852 37.7945 35.8128C38.2531 35.0891 38.5784 34.2819 38.7785 33.3417C39.1203 31.7442 39.462 30.1384 39.7957 28.541L40.1291 26.985L40.7378 24.1311L42.1052 17.7078L43.2389 12.3747L44.1228 8.23116C44.2396 7.66539 44.3146 7.14122 44.3313 6.63366L44.3396 6.41735L44.3229 6.20934V6.1511C44.3146 5.99301 44.3063 5.72676 44.2563 5.41059C44.1978 5.01954 44.0978 4.63681 43.9726 4.26239C43.164 1.9244 41.1379 0.468351 38.6784 0.426758H38.645H38.5784Z",
    fill: "#EA1C1C"
  })));
}

var ForwardRef = /*#__PURE__*/React.forwardRef(SvgTelegram);
export default __webpack_public_path__ + "static/media/telegram.f2f440f7d55cec6c54d020a6e61759e9.svg";
export { ForwardRef as ReactComponent };